version: '3.7'

services:

  # NOTE requires initialization (trust emulator's self-signed cert, create 2 databases)
  #      after `docker compose up equinox-cosmos`, run `bash docker-compose-cosmos.sh`
  equinox-cosmos:
    container_name: equinox-cosmos
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator
    restart: unless-stopped
    environment:
      - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=3
      - AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=127.0.0.1
    ports:
      - "8081:8081" # so docker-cosmos-init.sh can get the cert and/or humans can use https://localhost:8081/_explorer/index.html
      - "10250-10256:10250-10256" # tests connect using Direct mode

  # NOTE MANUAL STEP until MS get with the program https://github.com/microsoft/mssql-docker/issues/2#issuecomment-1059819719
  #      after `docker compose up`, run `bash docker-compose-mssql.sh`
  equinox-mssql:
    container_name: equinox-mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    restart: unless-stopped
    ports:
      - 1433:1433
    environment:
      - SA_PASSWORD=mssql1Ipw
      - ACCEPT_EULA=Y

  equinox-mysql:
    container_name: equinox-mysql
    image: mysql:5.6
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_DATABASE=EQUINOX_TEST_DB
# it _almost_ (but doesnt) works with the default mysql using the following
#    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']

  setup.eventstore:
    image: eventstore/es-gencert-cli:1.0.2
    entrypoint: bash
    user: "1000:1000"
    command: >
      -c "mkdir -p ./certs && cd /certs
      && es-gencert-cli create-ca
      && es-gencert-cli create-node -out ./node1 -ip-addresses 127.0.0.1,172.30.240.11 -dns-names localhost
      && es-gencert-cli create-node -out ./node2 -ip-addresses 127.0.0.1,172.30.240.12 -dns-names localhost
      && es-gencert-cli create-node -out ./node3 -ip-addresses 127.0.0.1,172.30.240.13 -dns-names localhost
      && find . -type f -print0 | xargs -0 chmod 666"
    container_name: setup.eventstore
    volumes:
      - ./certs:/certs

  node1.eventstore: &template
      image: eventstore/eventstore:21.10.0-buster-slim
      container_name: node1.eventstore
      env_file:
        - docker-compose.env
      environment:
        - EVENTSTORE_INT_IP=172.30.240.11
        - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=2111
        - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=1111
        - EVENTSTORE_GOSSIP_SEED=172.30.240.12:2113,172.30.240.13:2113
        - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/certs/ca
        - EVENTSTORE_CERTIFICATE_FILE=/certs/node1/node.crt
        - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/certs/node1/node.key
      healthcheck:
        test:
          [
              "CMD-SHELL",
              "curl --fail --insecure https://node1.eventstore:2113/health/live || exit 1",
          ]
        interval: 5s
        timeout: 5s
        retries: 24
      ports:
        - 1111:1113
        - 2111:2113
      volumes:
        - ./certs:/certs
      depends_on:
        - setup.eventstore
      restart: always
      networks:
        clusternetwork:
          ipv4_address: 172.30.240.11

  node2.eventstore:
      <<: *template
      container_name: node2.eventstore
      environment:
        - EVENTSTORE_INT_IP=172.30.240.12
        - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=2112
        - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=1112
        - EVENTSTORE_GOSSIP_SEED=172.30.240.11:2113,172.30.240.13:2113
        - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/certs/ca
        - EVENTSTORE_CERTIFICATE_FILE=/certs/node2/node.crt
        - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/certs/node2/node.key
      healthcheck:
        test:
          [
              "CMD-SHELL",
              "curl --fail --insecure https://node2.eventstore:2113/health/live || exit 1",
          ]
        interval: 5s
        timeout: 5s
        retries: 24
      ports:
        - 1112:1113
        - 2112:2113
      networks:
        clusternetwork:
          ipv4_address: 172.30.240.12

  node3.eventstore:
      <<: *template
      container_name: node3.eventstore
      environment:
        - EVENTSTORE_INT_IP=172.30.240.13
        - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=2113
        - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=1113
        - EVENTSTORE_GOSSIP_SEED=172.30.240.11:2113,172.30.240.12:2113
        - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/certs/ca
        - EVENTSTORE_CERTIFICATE_FILE=/certs/node3/node.crt
        - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/certs/node3/node.key
      healthcheck:
        test:
          [
              "CMD-SHELL",
              "curl --fail --insecure https://node3.eventstore:2113/health/live || exit 1",
          ]
        interval: 5s
        timeout: 5s
        retries: 24
      ports:
        - 1113:1113
        - 2113:2113
      networks:
        clusternetwork:
          ipv4_address: 172.30.240.13

  dynamodb-local:
    image: amazon/dynamodb-local
    container_name: dynamodb-local
    hostname: dynamodb-local
    restart: always
    volumes:
      - ./docker-dynamodblocal-data:/home/dynamodblocal/data
    ports:
      - 8000:8000
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/"
    
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: "http://dynamodb-local:8000"
      AWS_REGION: "us-west-2"
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    depends_on:
      - dynamodb-local
  equinox-messagedb:
    image: ethangarofolo/message-db
    ports:
      - "5432:5432"

networks:
  clusternetwork:
    name: eventstoredb.local
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.240.0/24
