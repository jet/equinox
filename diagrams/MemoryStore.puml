@startuml
!includeurl https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml

title Component diagram for Equinox with Equinox.MemoryStore
caption Moving parts for an integration test scenario using MemoryStore in lieu of a Durable Store

actor "App Integration\nTests" <<External Person>> as tests

rectangle "Application's Consistent Processing Logic" <<Expanded>> {
    rectangle aggregate <<Component>> [
        Aggregate / Service

        Events: codec
        Fold: initial, fold
        interpret / decide
        Service
    ]
    rectangle stream <<Component>> [
        Equinox.Stream
    ]
    interface IStream <<Component>>
}

rectangle "System Under Test + Simulators" <<External Container>> {
    rectangle reactors <<Container>> [
        **Reactors Under Test**
    ]
    rectangle ingesters <<Container>> [
        **Ingesters Under Test**
    ]

    rectangle inputs <<Component>> [
        **Input Simulators**
    ]
    database caches <<External Container>> [
        **Read Model Simulators**
    ]
    rectangle "Memory Store" <<Container>> {

        rectangle equinoxms <<Component>> [
            Equinox.MemoryStore
        ]
        interface IObservable <<Component>>
        database equinoxmsdict <<Component>> [
            **ConcurrentDictionary**
            StreamName
            ->
            TimelineEvent<T>
        ]
    }
}

tests       <-->  aggregate     : transact\nagainst
tests       <..    caches      : validate\neventually\nconsistent
tests       -->  equinoxms     : can validate

aggregate  <.R.>  stream        : Transact/\nQuery
stream      .R.>  IStream       : Load/\nTrySync

equinoxms   .U.>  IStream        : implements
equinoxms   -->  equinoxmsdict : has a\nvolatile
equinoxms   .L.>  IObservable   : feeds

ingesters  <-U->   aggregate     : run transactions against
ingesters   -->   caches        : maintain\nviews\nin
ingesters  <-- inputs       : feed into

reactors   <-R-     IObservable  : subscribe to\n(TODO)
reactors   <-U->    aggregate    : run transactions against
reactors   -->   caches        : maintain\nviews\nin

@enduml