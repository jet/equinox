@startuml
!includeurl https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml

title Component diagram for Equinox.MemoryStore
caption Detailed moving parts for an integration test scenario using MemoryStore in lieu of a Durable Store

actor "Integration\nTests" <<Person>> as tests

rectangle "Equinox.MemoryStore" <<Expanded>> {
    interface IObservable <<Component>>
    rectangle eqxms <<Component>> [
        Equinox.MemoryStore
    ]
    database eqxmsdict <<Component>> [
        **ConcurrentDictionary**
        StreamName -> TimelineEvent<T>
    ]
}

database caches <<External Container>> [
    **Read Model Simulators**
    **and/or Concrete Stores**
]

rectangle "System Under Test + Simulators" <<Expanded>> {
    rectangle ingesters <<Container>> [
        **Ingesters Under Test**
    ]
    rectangle reactors <<Container>> [
        **Reactors Under Test**
    ]
    rectangle inputs <<External Component>> [
        **Input Simulators**
    ]
}

rectangle "Application Consistent Processing Logic" <<Container>> {
    rectangle aggregate <<Component>> [
        Aggregate / Service

        Events: codec
        Fold: initial, fold
        interpret / decide
        Service
    ]
    rectangle aggregate2 <<Component>> [
        Aggregate / Service

        Events: codec
        Fold: initial, fold
        interpret / decide
        Service
    ]
    rectangle stream <<Component>> [
        Equinox.Stream
    ]
    interface IStream <<Component>>
}

tests        <-> aggregate   : transact\nagainst
tests      <.    caches      : may probe\neventually\nconsistent
tests         -> eqxms       : may validate\nby probing

aggregate  <-R-> stream      : Transact
aggregate2 <-R-> stream      : Transact/\nQuery
stream      -R-> IStream     : Load/\nTrySync

eqxms        --> IStream     : implements
eqxms        ..> eqxmsdict   : has a\nvolatile
eqxms        --> IObservable : feeds

ingesters   -U-> aggregate   : run transactions against
ingesters   .U.> caches      : maintain\nviews\nin
ingesters  <.R.  inputs      : feed into

reactors   <-    IObservable : can subscribe to\n(TODO)
reactors   <-U-> aggregate2  : run transactions against
reactors      .> caches      : maintain\nviews\nin

@enduml