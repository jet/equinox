@startuml
!includeurl https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml

title System Context Diagram for Equinox (+Propulsion)
caption High level organization of an event sourced system using Equinox (aspects typically not using Equinox directly are marked External)

together {
    actor "Applications" <<Internal>> as apps
    rectangle services <<System>> [
        **Consistent Processing**
        __Equinox__
        Making Decisions
        Executing Commands
        Querying synchronously
    ]
    database stores <<Internal>> [
        **Consistent Event Stores**
        ____
        EventStore / SqlStreamStore
        CosmosDB / MemoryStore
        (snapshots / unfolds)
    ]
}

database caches <<External>> [
    **Read Models**
    ____  
    Document Stores 
    SQL DBs, REDIS, etc
]

together {
    rectangle ingesters <<System>> [
        **Ingestion**
        __Propulsion / Equinox / FsKafka__
        Sync from reference data
        Change Data Capture
        Event Carried State Transfer
    ]
    rectangle reactors <<System>> [
        **Reactions**
        __Propulsion / Equinox__
        Drive Reactions
        Compose Notifications
    ]
    rectangle projectors <<External System>> [
        **Publishing**
        __Propulsion / FsKafka__
        Publish Simple Notifications
        Emit Composed Notifications
    ]
}

rectangle sources <<External System>> [
    **Input Feeds**
    ____
    Topics / Buses
    ATOM feeds 
]
rectangle sinks <<External System>> [
    **Output Feeds**
    ____
    Topics / Buses
    ATOM feeds
]

apps       <--   caches     : reference\neventually\nconsistent
apps       <-R-> services   : transact against /\nsynchronously query

services   <-R-> stores     : Query/Transact\n[in terms of events]

stores     ..>   projectors : are followed by
stores     ..>   reactors   : trigger

projectors ..>   sinks      : emit complex notifications to
projectors ..>   sinks      : publish some events to

reactors   -->   services   : feed back into
reactors   ..>   sinks      : emit complex summaries to
reactors   .U.>   caches    : maintain views in

ingesters  <..   sources    : consume
ingesters  -->   services   : ingest into
ingesters  .U.>   caches    : ingest into

@enduml